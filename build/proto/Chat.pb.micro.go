// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/Chat.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ChatService service

type ChatService interface {
	CreateChat(ctx context.Context, in *CreateChatRequest, opts ...client.CallOption) (*CreateChatResponse, error)
	DropChat(ctx context.Context, in *DropChatRequest, opts ...client.CallOption) (*DropChatRequest, error)
}

type chatService struct {
	c    client.Client
	name string
}

func NewChatService(name string, c client.Client) ChatService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &chatService{
		c:    c,
		name: name,
	}
}

func (c *chatService) CreateChat(ctx context.Context, in *CreateChatRequest, opts ...client.CallOption) (*CreateChatResponse, error) {
	req := c.c.NewRequest(c.name, "ChatService.CreateChat", in)
	out := new(CreateChatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) DropChat(ctx context.Context, in *DropChatRequest, opts ...client.CallOption) (*DropChatRequest, error) {
	req := c.c.NewRequest(c.name, "ChatService.DropChat", in)
	out := new(DropChatRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatService service

type ChatServiceHandler interface {
	CreateChat(context.Context, *CreateChatRequest, *CreateChatResponse) error
	DropChat(context.Context, *DropChatRequest, *DropChatRequest) error
}

func RegisterChatServiceHandler(s server.Server, hdlr ChatServiceHandler, opts ...server.HandlerOption) error {
	type chatService interface {
		CreateChat(ctx context.Context, in *CreateChatRequest, out *CreateChatResponse) error
		DropChat(ctx context.Context, in *DropChatRequest, out *DropChatRequest) error
	}
	type ChatService struct {
		chatService
	}
	h := &chatServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ChatService{h}, opts...))
}

type chatServiceHandler struct {
	ChatServiceHandler
}

func (h *chatServiceHandler) CreateChat(ctx context.Context, in *CreateChatRequest, out *CreateChatResponse) error {
	return h.ChatServiceHandler.CreateChat(ctx, in, out)
}

func (h *chatServiceHandler) DropChat(ctx context.Context, in *DropChatRequest, out *DropChatRequest) error {
	return h.ChatServiceHandler.DropChat(ctx, in, out)
}
